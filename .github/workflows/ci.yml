name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Frontend build and test
  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint:ci
      
      - name: Run type check
        run: npm run type-check
      
      - name: Build application
        run: npm run build
        env:
          # Use demo values for CI build
          VITE_FIREBASE_API_KEY: demo-api-key
          VITE_FIREBASE_AUTH_DOMAIN: demo-project.firebaseapp.com
          VITE_FIREBASE_PROJECT_ID: demo-project
          VITE_FIREBASE_STORAGE_BUCKET: demo-project.appspot.com
          VITE_FIREBASE_MESSAGING_SENDER_ID: "123456789"
          VITE_FIREBASE_APP_ID: demo-app-id
          VITE_OPENAI_API_KEY: demo-openai-key

  # Security and quality checks
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run security audit
        run: |
          cd frontend
          npm audit --audit-level=moderate
      
      - name: Check for outdated packages
        run: |
          cd frontend
          npm outdated || true

  # Deploy to Firebase (only on main branch)
  deploy:
    needs: [frontend, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Check deployment secrets
        run: |
          echo "üîç Checking Firebase deployment secrets..."
          MISSING_SECRETS=""
          
          if [ -z "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" ]; then
            echo "‚ùå FIREBASE_SERVICE_ACCOUNT secret is missing"
            MISSING_SECRETS="$MISSING_SECRETS FIREBASE_SERVICE_ACCOUNT"
          else
            echo "‚úÖ FIREBASE_SERVICE_ACCOUNT secret is configured"
          fi
          
          if [ -z "${{ secrets.FIREBASE_PROJECT_ID }}" ]; then
            echo "‚ùå FIREBASE_PROJECT_ID secret is missing"
            MISSING_SECRETS="$MISSING_SECRETS FIREBASE_PROJECT_ID"
          else
            echo "‚úÖ FIREBASE_PROJECT_ID secret is configured (value: ${{ secrets.FIREBASE_PROJECT_ID }})"
          fi
          
          if [ -z "${{ secrets.FIREBASE_API_KEY }}" ]; then
            echo "‚ùå FIREBASE_API_KEY secret is missing"
            MISSING_SECRETS="$MISSING_SECRETS FIREBASE_API_KEY"
          else
            echo "‚úÖ FIREBASE_API_KEY secret is configured"
          fi
          
          if [ -z "${{ secrets.FIREBASE_AUTH_DOMAIN }}" ]; then
            echo "‚ùå FIREBASE_AUTH_DOMAIN secret is missing"
            MISSING_SECRETS="$MISSING_SECRETS FIREBASE_AUTH_DOMAIN"
          else
            echo "‚úÖ FIREBASE_AUTH_DOMAIN secret is configured (value: ${{ secrets.FIREBASE_AUTH_DOMAIN }})"
          fi
          
          if [ -z "${{ secrets.FIREBASE_STORAGE_BUCKET }}" ]; then
            echo "‚ùå FIREBASE_STORAGE_BUCKET secret is missing"
            MISSING_SECRETS="$MISSING_SECRETS FIREBASE_STORAGE_BUCKET"
          else
            echo "‚úÖ FIREBASE_STORAGE_BUCKET secret is configured (value: ${{ secrets.FIREBASE_STORAGE_BUCKET }})"
          fi
          
          if [ -z "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" ]; then
            echo "‚ùå FIREBASE_MESSAGING_SENDER_ID secret is missing"
            MISSING_SECRETS="$MISSING_SECRETS FIREBASE_MESSAGING_SENDER_ID"
          else
            echo "‚úÖ FIREBASE_MESSAGING_SENDER_ID secret is configured"
          fi
          
          if [ -z "${{ secrets.FIREBASE_APP_ID }}" ]; then
            echo "‚ùå FIREBASE_APP_ID secret is missing"
            MISSING_SECRETS="$MISSING_SECRETS FIREBASE_APP_ID"
          else
            echo "‚úÖ FIREBASE_APP_ID secret is configured"
          fi
          
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "‚ùå OPENAI_API_KEY secret is missing"
            MISSING_SECRETS="$MISSING_SECRETS OPENAI_API_KEY"
          else
            echo "‚úÖ OPENAI_API_KEY secret is configured"
          fi
          
          if [ -n "$MISSING_SECRETS" ]; then
            echo ""
            echo "üö® MISSING SECRETS:$MISSING_SECRETS"
            echo ""
            echo "‚ö†Ô∏è Firebase deployment secrets not configured. Skipping deployment."
            echo "To enable deployment, configure the following secrets in GitHub repository settings:"
            echo "Go to: https://github.com/EdgarJob/ai-powered-ats/settings/secrets/actions"
            for secret in $MISSING_SECRETS; do
              echo "- $secret"
            done
            exit 0
          fi
          
          echo "üéâ All required secrets are configured!"
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Build for production
        run: |
          cd frontend
          npm run build
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          VITE_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      
      - name: Deploy to Firebase
        run: |
          echo "üöÄ Starting Firebase deployment..."
          echo "Project ID: ${{ secrets.FIREBASE_PROJECT_ID }}"
          echo "Working directory: $(pwd)"
          echo "Build directory contents:"
          ls -la frontend/dist/ || echo "‚ùå Build directory not found"
        
      - name: Firebase Hosting Deploy
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          projectId: ${{ secrets.FIREBASE_PROJECT_ID }}
          channelId: live
          entryPoint: ./ 