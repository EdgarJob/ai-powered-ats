---
description: 
globs: 
alwaysApply: true
---
# Authentication and Route Protection Pattern

**Goal for AI:** Implement consistent authentication patterns using Firebase Auth with proper error handling and user state management.

**Constraint/Guideline:**
- Use the centralized auth-service.ts for all authentication operations
- Implement proper loading states during authentication operations
- Use React Router's navigation hooks for post-authentication redirects
- Always handle authentication errors with user-friendly messages
- Use the established UserData interface for user information

**Example (Good):**
```tsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { signIn } from '../lib/auth-service';

function LoginPage() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      const userCredential = await signIn(email, password);
      console.log('Logged in successfully:', userCredential.user);
      navigate('/dashboard');
    } catch (error) {
      console.error('Login error:', error);
      setError('Failed to login. Please check your credentials.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      {error && (
        <div className="bg-red-50 text-red-500 p-3 rounded-md mb-4">
          {error}
        </div>
      )}
      {/* Form fields */}
    </form>
  );
}
